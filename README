ФИО: Шведов Юрий
Группа 321
Задание: 3 / OpenGL (Интерактивный ландшафт)

Управление мышью [+]
Туман [+]
Объекты [+]
Вода [+]
Отражение [+]
Тени [-]

Система: GNU Make
ОС: Debian GNU/Linux 6.0.6 (squeeze)
Аппаратура:
        CPU: Intel Core 2 Duo E7200 2.53 GHz,
        VGA: nVidia GForce GTS 250

Windows:
Клиентская часть изначально писалась в виде шаренной
библиотеки под X Window System. Портирование на винтовс
произодилось с использьованием glut. В всязи с
невозможностью адекватно подключать какие-либо библиотеки
(в частнсти glut) к системам программирования Windows
(в частность к MinGW) и так как не получилось найти
работающую версию в интернете, попытка собрать что-либо
на винтовсе увенчалась частичным провалом.
Компиляция прошла нормально, но линкер не хотел подключать
библиотеки. В силу того, что установка VS (не говоря уже и
о запуске) займет еще больше времени, чем я потратил на
поиск библиотек, я оставил любые попытки сделать что-либо
на винтовсе и решил наконец продолжить заниматься
заданием по МашГрафу.

Linux:
При компиляции на системе, отличной от той, на которой
производилось написание программы, возникли некоторые проблемы
(в силу того, что не было времени настраивать autogen, хотя
научится стоит). Проблемы были связаны с созданием шаренных
библиотек - линкер предлагал скомпилировать с определенными
параметрами. Для этого попробуйте
(cd GLFrontEnd; make clean; make CFLAGS+=<OPT>) && \
(cd Serialization; make clean; make CFLAGS+=<OPT>) && \
make;
К бинарнику прилагается скрипт, который поключает библиотеки,
лучше использовать его, иначе могут возникнуть проблемы с загрузкой
текстурки в дириктории bin/textures, которую лучше не трогать.

Программа разделена на логические модули. Клиентская часть (работает только,
как я сказал X-Client), Сериализация и Графическая часть. Первые две я вынес
в отдельные библиотеки, так как они вполне могут пригодится в будущем.

Клиентская часть реализует класс Client, объекты которого создают окошечки
и инициализирует GL-контекст. Для работы объекта класса Client необходимо
определить два класса-наследника от интерфейсов Graphics и ControlEventHandler
которые, соответсвенно реализуют графику и обработку событий управления (мышь,
клавиатура).

Шрафическая часть состоит из реализации классов-наследников Graphics и
ControlEventHandler, Чанков и их Генераторов, Камеры и дополнительных
фитчей.

Сериализация имеет структуру описанную в задании для практикуму,
однако, в силу использовая динамического полиморфизма в графической части,
пришлось практически продублировать это структуру (используя виртуальное
множественное наследование), чтобы сериализаторы знали, какой именно объект
нужно создавать при чтении.

Для загрузки тектсуры использовалась библиотека SDL

З.Ы. Камера не проходит сквозь ланшафт, однако ныряет под воду.

Управление:

Mouse - перемещение взгляда камеры
WSAD - перемещение камеры
Space - подниматься
Ctrl - опускаться
X-клиент грабит мышь, чтобы отпустить ее - rctrl (как в VirtualBox)
Esc - выход

И маленький юзэйдж:
Usage: landscape [-ib in_binary_file] [-is in_string_file]
         [-ob out_binary_file] [-os out_string_file].
Входной файл может быть только один, выходных - сколько угодно.
